/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.scistor.process.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-11-19")
public class SlaveService {

  public interface Iface {

    public void addOperators(List<Map<String, String>> operators, boolean contained) throws TException;

    public void removeOperator(String operatorMainClass, boolean isConsumer) throws TException;

    public String addComponent(String componentName, ByteBuffer componentInfo) throws TException;

  }

  public interface AsyncIface {

    public void addOperators(List<Map<String, String>> operators, boolean contained, AsyncMethodCallback resultHandler) throws TException;

    public void removeOperator(String operatorMainClass, boolean isConsumer, AsyncMethodCallback resultHandler) throws TException;

    public void addComponent(String componentName, ByteBuffer componentInfo, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addOperators(List<Map<String,String>> operators, boolean contained) throws TException
    {
      send_addOperators(operators, contained);
      recv_addOperators();
    }

    public void send_addOperators(List<Map<String,String>> operators, boolean contained) throws TException
    {
      addOperators_args args = new addOperators_args();
      args.setOperators(operators);
      args.setContained(contained);
      sendBase("addOperators", args);
    }

    public void recv_addOperators() throws TException
    {
      addOperators_result result = new addOperators_result();
      receiveBase(result, "addOperators");
      return;
    }

    public void removeOperator(String operatorMainClass, boolean isConsumer) throws TException
    {
      send_removeOperator(operatorMainClass, isConsumer);
      recv_removeOperator();
    }

    public void send_removeOperator(String operatorMainClass, boolean isConsumer) throws TException
    {
      removeOperator_args args = new removeOperator_args();
      args.setOperatorMainClass(operatorMainClass);
      args.setIsConsumer(isConsumer);
      sendBase("removeOperator", args);
    }

    public void recv_removeOperator() throws TException
    {
      removeOperator_result result = new removeOperator_result();
      receiveBase(result, "removeOperator");
      return;
    }

    public String addComponent(String componentName, ByteBuffer componentInfo) throws TException
    {
      send_addComponent(componentName, componentInfo);
      return recv_addComponent();
    }

    public void send_addComponent(String componentName, ByteBuffer componentInfo) throws TException
    {
      addComponent_args args = new addComponent_args();
      args.setComponentName(componentName);
      args.setComponentInfo(componentInfo);
      sendBase("addComponent", args);
    }

    public String recv_addComponent() throws TException
    {
      addComponent_result result = new addComponent_result();
      receiveBase(result, "addComponent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addComponent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addOperators(List<Map<String,String>> operators, boolean contained, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      addOperators_call method_call = new addOperators_call(operators, contained, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOperators_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Map<String,String>> operators;
      private boolean contained;
      public addOperators_call(List<Map<String,String>> operators, boolean contained, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operators = operators;
        this.contained = contained;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOperators", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOperators_args args = new addOperators_args();
        args.setOperators(operators);
        args.setContained(contained);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addOperators();
      }
    }

    public void removeOperator(String operatorMainClass, boolean isConsumer, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      removeOperator_call method_call = new removeOperator_call(operatorMainClass, isConsumer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeOperator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String operatorMainClass;
      private boolean isConsumer;
      public removeOperator_call(String operatorMainClass, boolean isConsumer, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.operatorMainClass = operatorMainClass;
        this.isConsumer = isConsumer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeOperator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeOperator_args args = new removeOperator_args();
        args.setOperatorMainClass(operatorMainClass);
        args.setIsConsumer(isConsumer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeOperator();
      }
    }

    public void addComponent(String componentName, ByteBuffer componentInfo, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      addComponent_call method_call = new addComponent_call(componentName, componentInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addComponent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String componentName;
      private ByteBuffer componentInfo;
      public addComponent_call(String componentName, ByteBuffer componentInfo, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.componentName = componentName;
        this.componentInfo = componentInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addComponent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addComponent_args args = new addComponent_args();
        args.setComponentName(componentName);
        args.setComponentInfo(componentInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addComponent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addOperators", new addOperators());
      processMap.put("removeOperator", new removeOperator());
      processMap.put("addComponent", new addComponent());
      return processMap;
    }

    public static class addOperators<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOperators_args> {
      public addOperators() {
        super("addOperators");
      }

      public addOperators_args getEmptyArgsInstance() {
        return new addOperators_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOperators_result getResult(I iface, addOperators_args args) throws TException {
        addOperators_result result = new addOperators_result();
        iface.addOperators(args.operators, args.contained);
        return result;
      }
    }

    public static class removeOperator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeOperator_args> {
      public removeOperator() {
        super("removeOperator");
      }

      public removeOperator_args getEmptyArgsInstance() {
        return new removeOperator_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeOperator_result getResult(I iface, removeOperator_args args) throws TException {
        removeOperator_result result = new removeOperator_result();
        iface.removeOperator(args.operatorMainClass, args.isConsumer);
        return result;
      }
    }

    public static class addComponent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addComponent_args> {
      public addComponent() {
        super("addComponent");
      }

      public addComponent_args getEmptyArgsInstance() {
        return new addComponent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addComponent_result getResult(I iface, addComponent_args args) throws TException {
        addComponent_result result = new addComponent_result();
        result.success = iface.addComponent(args.componentName, args.componentInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addOperators", new addOperators());
      processMap.put("removeOperator", new removeOperator());
      processMap.put("addComponent", new addComponent());
      return processMap;
    }

    public static class addOperators<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOperators_args, Void> {
      public addOperators() {
        super("addOperators");
      }

      public addOperators_args getEmptyArgsInstance() {
        return new addOperators_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addOperators_result result = new addOperators_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOperators_result result = new addOperators_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOperators_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addOperators(args.operators, args.contained,resultHandler);
      }
    }

    public static class removeOperator<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeOperator_args, Void> {
      public removeOperator() {
        super("removeOperator");
      }

      public removeOperator_args getEmptyArgsInstance() {
        return new removeOperator_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeOperator_result result = new removeOperator_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeOperator_result result = new removeOperator_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeOperator_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeOperator(args.operatorMainClass, args.isConsumer,resultHandler);
      }
    }

    public static class addComponent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addComponent_args, String> {
      public addComponent() {
        super("addComponent");
      }

      public addComponent_args getEmptyArgsInstance() {
        return new addComponent_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addComponent_result result = new addComponent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addComponent_result result = new addComponent_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addComponent_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addComponent(args.componentName, args.componentInfo,resultHandler);
      }
    }

  }

  public static class addOperators_args implements org.apache.thrift.TBase<addOperators_args, addOperators_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOperators_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperators_args");

    private static final org.apache.thrift.protocol.TField OPERATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("operators", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CONTAINED_FIELD_DESC = new org.apache.thrift.protocol.TField("contained", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperators_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperators_argsTupleSchemeFactory());
    }

    public List<Map<String,String>> operators; // required
    public boolean contained; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATORS((short)1, "operators"),
      CONTAINED((short)2, "contained");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATORS
            return OPERATORS;
          case 2: // CONTAINED
            return CONTAINED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CONTAINED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATORS, new org.apache.thrift.meta_data.FieldMetaData("operators", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.CONTAINED, new org.apache.thrift.meta_data.FieldMetaData("contained", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperators_args.class, metaDataMap);
    }

    public addOperators_args() {
    }

    public addOperators_args(
      List<Map<String,String>> operators,
      boolean contained)
    {
      this();
      this.operators = operators;
      this.contained = contained;
      setContainedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperators_args(addOperators_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOperators()) {
        List<Map<String,String>> __this__operators = new ArrayList<Map<String,String>>(other.operators.size());
        for (Map<String,String> other_element : other.operators) {
          Map<String,String> __this__operators_copy = new HashMap<String,String>(other_element);
          __this__operators.add(__this__operators_copy);
        }
        this.operators = __this__operators;
      }
      this.contained = other.contained;
    }

    public addOperators_args deepCopy() {
      return new addOperators_args(this);
    }

    @Override
    public void clear() {
      this.operators = null;
      setContainedIsSet(false);
      this.contained = false;
    }

    public int getOperatorsSize() {
      return (this.operators == null) ? 0 : this.operators.size();
    }

    public java.util.Iterator<Map<String,String>> getOperatorsIterator() {
      return (this.operators == null) ? null : this.operators.iterator();
    }

    public void addToOperators(Map<String,String> elem) {
      if (this.operators == null) {
        this.operators = new ArrayList<Map<String,String>>();
      }
      this.operators.add(elem);
    }

    public List<Map<String,String>> getOperators() {
      return this.operators;
    }

    public addOperators_args setOperators(List<Map<String,String>> operators) {
      this.operators = operators;
      return this;
    }

    public void unsetOperators() {
      this.operators = null;
    }

    /** Returns true if field operators is set (has been assigned a value) and false otherwise */
    public boolean isSetOperators() {
      return this.operators != null;
    }

    public void setOperatorsIsSet(boolean value) {
      if (!value) {
        this.operators = null;
      }
    }

    public boolean isContained() {
      return this.contained;
    }

    public addOperators_args setContained(boolean contained) {
      this.contained = contained;
      setContainedIsSet(true);
      return this;
    }

    public void unsetContained() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTAINED_ISSET_ID);
    }

    /** Returns true if field contained is set (has been assigned a value) and false otherwise */
    public boolean isSetContained() {
      return EncodingUtils.testBit(__isset_bitfield, __CONTAINED_ISSET_ID);
    }

    public void setContainedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTAINED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPERATORS:
        if (value == null) {
          unsetOperators();
        } else {
          setOperators((List<Map<String,String>>)value);
        }
        break;

      case CONTAINED:
        if (value == null) {
          unsetContained();
        } else {
          setContained((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATORS:
        return getOperators();

      case CONTAINED:
        return isContained();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPERATORS:
        return isSetOperators();
      case CONTAINED:
        return isSetContained();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperators_args)
        return this.equals((addOperators_args)that);
      return false;
    }

    public boolean equals(addOperators_args that) {
      if (that == null)
        return false;

      boolean this_present_operators = true && this.isSetOperators();
      boolean that_present_operators = true && that.isSetOperators();
      if (this_present_operators || that_present_operators) {
        if (!(this_present_operators && that_present_operators))
          return false;
        if (!this.operators.equals(that.operators))
          return false;
      }

      boolean this_present_contained = true;
      boolean that_present_contained = true;
      if (this_present_contained || that_present_contained) {
        if (!(this_present_contained && that_present_contained))
          return false;
        if (this.contained != that.contained)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_operators = true && (isSetOperators());
      list.add(present_operators);
      if (present_operators)
        list.add(operators);

      boolean present_contained = true;
      list.add(present_contained);
      if (present_contained)
        list.add(contained);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOperators_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOperators()).compareTo(other.isSetOperators());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperators()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operators, other.operators);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContained()).compareTo(other.isSetContained());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContained()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contained, other.contained);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperators_args(");
      boolean first = true;

      sb.append("operators:");
      if (this.operators == null) {
        sb.append("null");
      } else {
        sb.append(this.operators);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contained:");
      sb.append(this.contained);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperators_argsStandardSchemeFactory implements SchemeFactory {
      public addOperators_argsStandardScheme getScheme() {
        return new addOperators_argsStandardScheme();
      }
    }

    private static class addOperators_argsStandardScheme extends StandardScheme<addOperators_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperators_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATORS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.operators = new ArrayList<Map<String,String>>(_list0.size);
                  Map<String,String> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                      _elem1 = new HashMap<String,String>(2*_map3.size);
                      String _key4;
                      String _val5;
                      for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                      {
                        _key4 = iprot.readString();
                        _val5 = iprot.readString();
                        _elem1.put(_key4, _val5);
                      }
                      iprot.readMapEnd();
                    }
                    struct.operators.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setOperatorsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTAINED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.contained = iprot.readBool();
                struct.setContainedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperators_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operators != null) {
          oprot.writeFieldBegin(OPERATORS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.operators.size()));
            for (Map<String,String> _iter7 : struct.operators)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter7.size()));
                for (Map.Entry<String, String> _iter8 : _iter7.entrySet())
                {
                  oprot.writeString(_iter8.getKey());
                  oprot.writeString(_iter8.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CONTAINED_FIELD_DESC);
        oprot.writeBool(struct.contained);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperators_argsTupleSchemeFactory implements SchemeFactory {
      public addOperators_argsTupleScheme getScheme() {
        return new addOperators_argsTupleScheme();
      }
    }

    private static class addOperators_argsTupleScheme extends TupleScheme<addOperators_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperators_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOperators()) {
          optionals.set(0);
        }
        if (struct.isSetContained()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOperators()) {
          {
            oprot.writeI32(struct.operators.size());
            for (Map<String,String> _iter9 : struct.operators)
            {
              {
                oprot.writeI32(_iter9.size());
                for (Map.Entry<String, String> _iter10 : _iter9.entrySet())
                {
                  oprot.writeString(_iter10.getKey());
                  oprot.writeString(_iter10.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetContained()) {
          oprot.writeBool(struct.contained);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperators_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.operators = new ArrayList<Map<String,String>>(_list11.size);
            Map<String,String> _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              {
                org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem12 = new HashMap<String,String>(2*_map14.size);
                String _key15;
                String _val16;
                for (int _i17 = 0; _i17 < _map14.size; ++_i17)
                {
                  _key15 = iprot.readString();
                  _val16 = iprot.readString();
                  _elem12.put(_key15, _val16);
                }
              }
              struct.operators.add(_elem12);
            }
          }
          struct.setOperatorsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.contained = iprot.readBool();
          struct.setContainedIsSet(true);
        }
      }
    }

  }

  public static class addOperators_result implements org.apache.thrift.TBase<addOperators_result, addOperators_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOperators_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOperators_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOperators_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOperators_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOperators_result.class, metaDataMap);
    }

    public addOperators_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperators_result(addOperators_result other) {
    }

    public addOperators_result deepCopy() {
      return new addOperators_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperators_result)
        return this.equals((addOperators_result)that);
      return false;
    }

    public boolean equals(addOperators_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addOperators_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOperators_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOperators_resultStandardSchemeFactory implements SchemeFactory {
      public addOperators_resultStandardScheme getScheme() {
        return new addOperators_resultStandardScheme();
      }
    }

    private static class addOperators_resultStandardScheme extends StandardScheme<addOperators_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOperators_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOperators_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOperators_resultTupleSchemeFactory implements SchemeFactory {
      public addOperators_resultTupleScheme getScheme() {
        return new addOperators_resultTupleScheme();
      }
    }

    private static class addOperators_resultTupleScheme extends TupleScheme<addOperators_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOperators_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOperators_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeOperator_args implements org.apache.thrift.TBase<removeOperator_args, removeOperator_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeOperator_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOperator_args");

    private static final org.apache.thrift.protocol.TField OPERATOR_MAIN_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorMainClass", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_CONSUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("isConsumer", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOperator_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOperator_argsTupleSchemeFactory());
    }

    public String operatorMainClass; // required
    public boolean isConsumer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPERATOR_MAIN_CLASS((short)1, "operatorMainClass"),
      IS_CONSUMER((short)2, "isConsumer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OPERATOR_MAIN_CLASS
            return OPERATOR_MAIN_CLASS;
          case 2: // IS_CONSUMER
            return IS_CONSUMER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISCONSUMER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPERATOR_MAIN_CLASS, new org.apache.thrift.meta_data.FieldMetaData("operatorMainClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_CONSUMER, new org.apache.thrift.meta_data.FieldMetaData("isConsumer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOperator_args.class, metaDataMap);
    }

    public removeOperator_args() {
    }

    public removeOperator_args(
      String operatorMainClass,
      boolean isConsumer)
    {
      this();
      this.operatorMainClass = operatorMainClass;
      this.isConsumer = isConsumer;
      setIsConsumerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOperator_args(removeOperator_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOperatorMainClass()) {
        this.operatorMainClass = other.operatorMainClass;
      }
      this.isConsumer = other.isConsumer;
    }

    public removeOperator_args deepCopy() {
      return new removeOperator_args(this);
    }

    @Override
    public void clear() {
      this.operatorMainClass = null;
      setIsConsumerIsSet(false);
      this.isConsumer = false;
    }

    public String getOperatorMainClass() {
      return this.operatorMainClass;
    }

    public removeOperator_args setOperatorMainClass(String operatorMainClass) {
      this.operatorMainClass = operatorMainClass;
      return this;
    }

    public void unsetOperatorMainClass() {
      this.operatorMainClass = null;
    }

    /** Returns true if field operatorMainClass is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorMainClass() {
      return this.operatorMainClass != null;
    }

    public void setOperatorMainClassIsSet(boolean value) {
      if (!value) {
        this.operatorMainClass = null;
      }
    }

    public boolean isIsConsumer() {
      return this.isConsumer;
    }

    public removeOperator_args setIsConsumer(boolean isConsumer) {
      this.isConsumer = isConsumer;
      setIsConsumerIsSet(true);
      return this;
    }

    public void unsetIsConsumer() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONSUMER_ISSET_ID);
    }

    /** Returns true if field isConsumer is set (has been assigned a value) and false otherwise */
    public boolean isSetIsConsumer() {
      return EncodingUtils.testBit(__isset_bitfield, __ISCONSUMER_ISSET_ID);
    }

    public void setIsConsumerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONSUMER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OPERATOR_MAIN_CLASS:
        if (value == null) {
          unsetOperatorMainClass();
        } else {
          setOperatorMainClass((String)value);
        }
        break;

      case IS_CONSUMER:
        if (value == null) {
          unsetIsConsumer();
        } else {
          setIsConsumer((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OPERATOR_MAIN_CLASS:
        return getOperatorMainClass();

      case IS_CONSUMER:
        return isIsConsumer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OPERATOR_MAIN_CLASS:
        return isSetOperatorMainClass();
      case IS_CONSUMER:
        return isSetIsConsumer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOperator_args)
        return this.equals((removeOperator_args)that);
      return false;
    }

    public boolean equals(removeOperator_args that) {
      if (that == null)
        return false;

      boolean this_present_operatorMainClass = true && this.isSetOperatorMainClass();
      boolean that_present_operatorMainClass = true && that.isSetOperatorMainClass();
      if (this_present_operatorMainClass || that_present_operatorMainClass) {
        if (!(this_present_operatorMainClass && that_present_operatorMainClass))
          return false;
        if (!this.operatorMainClass.equals(that.operatorMainClass))
          return false;
      }

      boolean this_present_isConsumer = true;
      boolean that_present_isConsumer = true;
      if (this_present_isConsumer || that_present_isConsumer) {
        if (!(this_present_isConsumer && that_present_isConsumer))
          return false;
        if (this.isConsumer != that.isConsumer)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_operatorMainClass = true && (isSetOperatorMainClass());
      list.add(present_operatorMainClass);
      if (present_operatorMainClass)
        list.add(operatorMainClass);

      boolean present_isConsumer = true;
      list.add(present_isConsumer);
      if (present_isConsumer)
        list.add(isConsumer);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOperator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOperatorMainClass()).compareTo(other.isSetOperatorMainClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorMainClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorMainClass, other.operatorMainClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsConsumer()).compareTo(other.isSetIsConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsConsumer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConsumer, other.isConsumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOperator_args(");
      boolean first = true;

      sb.append("operatorMainClass:");
      if (this.operatorMainClass == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorMainClass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isConsumer:");
      sb.append(this.isConsumer);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOperator_argsStandardSchemeFactory implements SchemeFactory {
      public removeOperator_argsStandardScheme getScheme() {
        return new removeOperator_argsStandardScheme();
      }
    }

    private static class removeOperator_argsStandardScheme extends StandardScheme<removeOperator_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOperator_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OPERATOR_MAIN_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorMainClass = iprot.readString();
                struct.setOperatorMainClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_CONSUMER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isConsumer = iprot.readBool();
                struct.setIsConsumerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOperator_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.operatorMainClass != null) {
          oprot.writeFieldBegin(OPERATOR_MAIN_CLASS_FIELD_DESC);
          oprot.writeString(struct.operatorMainClass);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_CONSUMER_FIELD_DESC);
        oprot.writeBool(struct.isConsumer);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOperator_argsTupleSchemeFactory implements SchemeFactory {
      public removeOperator_argsTupleScheme getScheme() {
        return new removeOperator_argsTupleScheme();
      }
    }

    private static class removeOperator_argsTupleScheme extends TupleScheme<removeOperator_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOperator_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOperatorMainClass()) {
          optionals.set(0);
        }
        if (struct.isSetIsConsumer()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOperatorMainClass()) {
          oprot.writeString(struct.operatorMainClass);
        }
        if (struct.isSetIsConsumer()) {
          oprot.writeBool(struct.isConsumer);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOperator_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.operatorMainClass = iprot.readString();
          struct.setOperatorMainClassIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isConsumer = iprot.readBool();
          struct.setIsConsumerIsSet(true);
        }
      }
    }

  }

  public static class removeOperator_result implements org.apache.thrift.TBase<removeOperator_result, removeOperator_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeOperator_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOperator_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOperator_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOperator_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOperator_result.class, metaDataMap);
    }

    public removeOperator_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOperator_result(removeOperator_result other) {
    }

    public removeOperator_result deepCopy() {
      return new removeOperator_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOperator_result)
        return this.equals((removeOperator_result)that);
      return false;
    }

    public boolean equals(removeOperator_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeOperator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOperator_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOperator_resultStandardSchemeFactory implements SchemeFactory {
      public removeOperator_resultStandardScheme getScheme() {
        return new removeOperator_resultStandardScheme();
      }
    }

    private static class removeOperator_resultStandardScheme extends StandardScheme<removeOperator_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOperator_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOperator_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOperator_resultTupleSchemeFactory implements SchemeFactory {
      public removeOperator_resultTupleScheme getScheme() {
        return new removeOperator_resultTupleScheme();
      }
    }

    private static class removeOperator_resultTupleScheme extends TupleScheme<removeOperator_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOperator_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOperator_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addComponent_args implements org.apache.thrift.TBase<addComponent_args, addComponent_args._Fields>, java.io.Serializable, Cloneable, Comparable<addComponent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComponent_args");

    private static final org.apache.thrift.protocol.TField COMPONENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("componentName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField COMPONENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("componentInfo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addComponent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addComponent_argsTupleSchemeFactory());
    }

    public String componentName; // required
    public ByteBuffer componentInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMPONENT_NAME((short)1, "componentName"),
      COMPONENT_INFO((short)2, "componentInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMPONENT_NAME
            return COMPONENT_NAME;
          case 2: // COMPONENT_INFO
            return COMPONENT_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMPONENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("componentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPONENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("componentInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComponent_args.class, metaDataMap);
    }

    public addComponent_args() {
    }

    public addComponent_args(
      String componentName,
      ByteBuffer componentInfo)
    {
      this();
      this.componentName = componentName;
      this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComponent_args(addComponent_args other) {
      if (other.isSetComponentName()) {
        this.componentName = other.componentName;
      }
      if (other.isSetComponentInfo()) {
        this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(other.componentInfo);
      }
    }

    public addComponent_args deepCopy() {
      return new addComponent_args(this);
    }

    @Override
    public void clear() {
      this.componentName = null;
      this.componentInfo = null;
    }

    public String getComponentName() {
      return this.componentName;
    }

    public addComponent_args setComponentName(String componentName) {
      this.componentName = componentName;
      return this;
    }

    public void unsetComponentName() {
      this.componentName = null;
    }

    /** Returns true if field componentName is set (has been assigned a value) and false otherwise */
    public boolean isSetComponentName() {
      return this.componentName != null;
    }

    public void setComponentNameIsSet(boolean value) {
      if (!value) {
        this.componentName = null;
      }
    }

    public byte[] getComponentInfo() {
      setComponentInfo(org.apache.thrift.TBaseHelper.rightSize(componentInfo));
      return componentInfo == null ? null : componentInfo.array();
    }

    public ByteBuffer bufferForComponentInfo() {
      return org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
    }

    public addComponent_args setComponentInfo(byte[] componentInfo) {
      this.componentInfo = componentInfo == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(componentInfo, componentInfo.length));
      return this;
    }

    public addComponent_args setComponentInfo(ByteBuffer componentInfo) {
      this.componentInfo = org.apache.thrift.TBaseHelper.copyBinary(componentInfo);
      return this;
    }

    public void unsetComponentInfo() {
      this.componentInfo = null;
    }

    /** Returns true if field componentInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetComponentInfo() {
      return this.componentInfo != null;
    }

    public void setComponentInfoIsSet(boolean value) {
      if (!value) {
        this.componentInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMPONENT_NAME:
        if (value == null) {
          unsetComponentName();
        } else {
          setComponentName((String)value);
        }
        break;

      case COMPONENT_INFO:
        if (value == null) {
          unsetComponentInfo();
        } else {
          setComponentInfo((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMPONENT_NAME:
        return getComponentName();

      case COMPONENT_INFO:
        return getComponentInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMPONENT_NAME:
        return isSetComponentName();
      case COMPONENT_INFO:
        return isSetComponentInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComponent_args)
        return this.equals((addComponent_args)that);
      return false;
    }

    public boolean equals(addComponent_args that) {
      if (that == null)
        return false;

      boolean this_present_componentName = true && this.isSetComponentName();
      boolean that_present_componentName = true && that.isSetComponentName();
      if (this_present_componentName || that_present_componentName) {
        if (!(this_present_componentName && that_present_componentName))
          return false;
        if (!this.componentName.equals(that.componentName))
          return false;
      }

      boolean this_present_componentInfo = true && this.isSetComponentInfo();
      boolean that_present_componentInfo = true && that.isSetComponentInfo();
      if (this_present_componentInfo || that_present_componentInfo) {
        if (!(this_present_componentInfo && that_present_componentInfo))
          return false;
        if (!this.componentInfo.equals(that.componentInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_componentName = true && (isSetComponentName());
      list.add(present_componentName);
      if (present_componentName)
        list.add(componentName);

      boolean present_componentInfo = true && (isSetComponentInfo());
      list.add(present_componentInfo);
      if (present_componentInfo)
        list.add(componentInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(addComponent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComponentName()).compareTo(other.isSetComponentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComponentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentName, other.componentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetComponentInfo()).compareTo(other.isSetComponentInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComponentInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.componentInfo, other.componentInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComponent_args(");
      boolean first = true;

      sb.append("componentName:");
      if (this.componentName == null) {
        sb.append("null");
      } else {
        sb.append(this.componentName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("componentInfo:");
      if (this.componentInfo == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.componentInfo, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComponent_argsStandardSchemeFactory implements SchemeFactory {
      public addComponent_argsStandardScheme getScheme() {
        return new addComponent_argsStandardScheme();
      }
    }

    private static class addComponent_argsStandardScheme extends StandardScheme<addComponent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComponent_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMPONENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.componentName = iprot.readString();
                struct.setComponentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPONENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.componentInfo = iprot.readBinary();
                struct.setComponentInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComponent_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.componentName != null) {
          oprot.writeFieldBegin(COMPONENT_NAME_FIELD_DESC);
          oprot.writeString(struct.componentName);
          oprot.writeFieldEnd();
        }
        if (struct.componentInfo != null) {
          oprot.writeFieldBegin(COMPONENT_INFO_FIELD_DESC);
          oprot.writeBinary(struct.componentInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComponent_argsTupleSchemeFactory implements SchemeFactory {
      public addComponent_argsTupleScheme getScheme() {
        return new addComponent_argsTupleScheme();
      }
    }

    private static class addComponent_argsTupleScheme extends TupleScheme<addComponent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComponent_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComponentName()) {
          optionals.set(0);
        }
        if (struct.isSetComponentInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetComponentName()) {
          oprot.writeString(struct.componentName);
        }
        if (struct.isSetComponentInfo()) {
          oprot.writeBinary(struct.componentInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComponent_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.componentName = iprot.readString();
          struct.setComponentNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.componentInfo = iprot.readBinary();
          struct.setComponentInfoIsSet(true);
        }
      }
    }

  }

  public static class addComponent_result implements org.apache.thrift.TBase<addComponent_result, addComponent_result._Fields>, java.io.Serializable, Cloneable, Comparable<addComponent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addComponent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addComponent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addComponent_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addComponent_result.class, metaDataMap);
    }

    public addComponent_result() {
    }

    public addComponent_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addComponent_result(addComponent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addComponent_result deepCopy() {
      return new addComponent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addComponent_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addComponent_result)
        return this.equals((addComponent_result)that);
      return false;
    }

    public boolean equals(addComponent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addComponent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addComponent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addComponent_resultStandardSchemeFactory implements SchemeFactory {
      public addComponent_resultStandardScheme getScheme() {
        return new addComponent_resultStandardScheme();
      }
    }

    private static class addComponent_resultStandardScheme extends StandardScheme<addComponent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addComponent_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addComponent_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addComponent_resultTupleSchemeFactory implements SchemeFactory {
      public addComponent_resultTupleScheme getScheme() {
        return new addComponent_resultTupleScheme();
      }
    }

    private static class addComponent_resultTupleScheme extends TupleScheme<addComponent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addComponent_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addComponent_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
